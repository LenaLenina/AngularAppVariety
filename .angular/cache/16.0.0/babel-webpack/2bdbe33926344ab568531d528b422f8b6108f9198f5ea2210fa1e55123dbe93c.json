{"ast":null,"code":"import * as i0 from \"@angular/core\";\nclass INumberEqualService {}\nINumberEqualService.ɵfac = function INumberEqualService_Factory(t) {\n  return new (t || INumberEqualService)();\n};\nINumberEqualService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: INumberEqualService,\n  factory: INumberEqualService.ɵfac\n});\nexport { INumberEqualService };\nclass NumberIsEven {\n  isEqual(number) {\n    return number % 2 == 0;\n  }\n}\nNumberIsEven.ɵfac = function NumberIsEven_Factory(t) {\n  return new (t || NumberIsEven)();\n};\nNumberIsEven.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: NumberIsEven,\n  factory: NumberIsEven.ɵfac\n});\nexport { NumberIsEven };\nclass NumberIsOdd {\n  isEqual(number) {\n    return number % 2 != 0;\n  }\n}\nNumberIsOdd.ɵfac = function NumberIsOdd_Factory(t) {\n  return new (t || NumberIsOdd)();\n};\nNumberIsOdd.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: NumberIsOdd,\n  factory: NumberIsOdd.ɵfac\n});\nexport { NumberIsOdd };\nclass NumberBeetween3And5 {\n  isEqual(number) {\n    return number >= 3 && number <= 5;\n  }\n}\nNumberBeetween3And5.ɵfac = function NumberBeetween3And5_Factory(t) {\n  return new (t || NumberBeetween3And5)();\n};\nNumberBeetween3And5.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: NumberBeetween3And5,\n  factory: NumberBeetween3And5.ɵfac\n});\nexport { NumberBeetween3And5 };","map":{"version":3,"names":["INumberEqualService","factory","ɵfac","NumberIsEven","isEqual","number","NumberIsOdd","NumberBeetween3And5"],"sources":["C:\\Users\\comp_12_2022\\Desktop\\my-app\\src\\app\\ProductsModule\\Core\\Services.Abstractions\\INumberEqualService.ts"],"sourcesContent":["import { Injectable, InjectionToken } from \"@angular/core\";\r\n\r\n@Injectable()\r\nexport abstract class INumberEqualService{\r\n    abstract isEqual(number: number): boolean;\r\n}\r\n\r\n// @Injectable()\r\n// export abstract class INumberEqualCondition \r\n// {\r\n//   abstract isEqual(number: number): boolean;\r\n// }\r\n\r\n\r\nexport interface INumberEqualCondition \r\n{\r\n  isEqual(number: number): boolean;\r\n}\r\n\r\n\r\n\r\n@Injectable()\r\nexport class NumberIsEven implements INumberEqualCondition\r\n{\r\n    public isEqual(number: number): boolean {\r\n        return number % 2 == 0;\r\n    }\r\n}\r\n\r\n@Injectable()\r\nexport class NumberIsOdd implements INumberEqualCondition\r\n{\r\n    public isEqual(number: number): boolean {\r\n        return number % 2 != 0;\r\n    }\r\n}\r\n\r\n@Injectable()\r\nexport class NumberBeetween3And5 implements INumberEqualCondition\r\n{\r\n    public isEqual(number: number): boolean {\r\n        return number >= 3 && number <= 5;\r\n    }\r\n}\r\n\r\n// export const NUMBER_EQUAL_CONDITIONS = new InjectionToken<INumberEqualCondition[]>('NumberEqualConditions');"],"mappings":";AAEA,MACsBA,mBAAmB;AAAnBA,mBAAmB,C;mBAAnBA,mBAAmB;AAAA;AAAnBA,mBAAmB,C;SAAnBA,mBAAmB;EAAAC,OAAA,EAAnBD,mBAAmB,CAAAE;AAAA;SAAnBF,mBAAmB;AAkBzC,MACaG,YAAY;EAEdC,OAAOA,CAACC,MAAc;IACzB,OAAOA,MAAM,GAAG,CAAC,IAAI,CAAC;EAC1B;;AAJSF,YAAY,C;mBAAZA,YAAY;AAAA;AAAZA,YAAY,C;SAAZA,YAAY;EAAAF,OAAA,EAAZE,YAAY,CAAAD;AAAA;SAAZC,YAAY;AAOzB,MACaG,WAAW;EAEbF,OAAOA,CAACC,MAAc;IACzB,OAAOA,MAAM,GAAG,CAAC,IAAI,CAAC;EAC1B;;AAJSC,WAAW,C;mBAAXA,WAAW;AAAA;AAAXA,WAAW,C;SAAXA,WAAW;EAAAL,OAAA,EAAXK,WAAW,CAAAJ;AAAA;SAAXI,WAAW;AAOxB,MACaC,mBAAmB;EAErBH,OAAOA,CAACC,MAAc;IACzB,OAAOA,MAAM,IAAI,CAAC,IAAIA,MAAM,IAAI,CAAC;EACrC;;AAJSE,mBAAmB,C;mBAAnBA,mBAAmB;AAAA;AAAnBA,mBAAmB,C;SAAnBA,mBAAmB;EAAAN,OAAA,EAAnBM,mBAAmB,CAAAL;AAAA;SAAnBK,mBAAmB"},"metadata":{},"sourceType":"module","externalDependencies":[]}